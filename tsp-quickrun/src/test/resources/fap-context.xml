<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:application.properties" ignore-unresolvable="true"/>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 添加注解支持 -->
    <context:annotation-config/>

    <!-- 这个配置为扫描当前项目中的所有需要spring管理的bean，除去Controller注解的bean，其中包名“com.sunyard.frameworkset.showcase”可替换为具体项目的包名 -->
    <context:component-scan base-package="com.sunyard.frameworkset.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 数据库及持久化管理-->

    <!--<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" lazy-init="true">-->
    <!--&lt;!&ndash; java:comp/env/jdbc/fapmcs &ndash;&gt;-->
    <!--<property name="jndiName" value="jdbc/fapmcs"/>-->
    <!--<property name="lookupOnStartup" value="false"/>-->
    <!--<property name="proxyInterface" value="javax.sql.DataSource"/>-->
    <!--<property name="resourceRef" value="true"/>-->
    <!--</bean>-->
    <!-- dataSource使用alibaba开源工具，以下所有的属性配置均在config.properties中配置 -->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.driver-class-name}"/>
        <property name="url" value="${spring.datasource.url}"/>
        <property name="username" value="${spring.datasource.username}"/>
        <property name="password" value="${spring.datasource.password}"/>

        <property name="filters" value="stat"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲链接，单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="validationQuery" value="${validation.sql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>


        <!--连接池中保留的最小连接数。-->
        <property name="minIdle" value="${pool.minIdle}"/>

        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxActive" value="${pool.maxActive}"/>

        <!--初始化时获取的连接数，取值应在minIdle与maxActive之间。Default: 3 -->
        <property name="initialSize" value="${pool.initialSize}"/>

        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 30s -->
        <property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}"/>

        <!--要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true -->
        <property name="maxOpenPreparedStatements" value="${pool.maxOpenPreparedStatements}"/>

    </bean>

    <bean id="inceptorJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 这个地方的value取的是项目po实体所在的包，其中包名“com.sunyard.frameworkset.showcase.entity”可替换为具体的项目实体的包名 -->
        <property name="packagesToScan">
            <list>
                <value>${scan.packages}</value>
            </list>
        </property>
        <property name="persistenceUnitName" value="fap-jpa"></property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="${jpa.showSql}"/>
                <property name="database" value="${fap.database}"/>
                <property name="generateDdl" value="${generateDdl}"></property>
            </bean>
        </property>

    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="httpClientFactory" class="org.springframework.http.client.SimpleClientHttpRequestFactory">
        <property name="connectTimeout" value="10000" />
        <property name="readTimeout" value="10000" />
    </bean>

    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <constructor-arg ref="httpClientFactory" />
    </bean>

</beans>
